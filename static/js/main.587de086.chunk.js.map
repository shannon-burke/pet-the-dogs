{"version":3,"sources":["components/Header/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","this","currentScore","leftToWin","Component","ImageCard","src","alt","onClick","clickFunction","App","state","Dogs","length","hasBeenClicked","console","log","increaseScore","includes","gameLose","scramble","gameWin","push","setState","alert","gameReset","map","dog","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"myBAwBeA,G,qLAlBJC,GAGH,OACI,6BACI,6BACI,yBAAKC,UAAU,0BACX,+CACA,wBAAIC,GAAG,uBAAuBD,UAAU,8BACpC,4BAAI,8CAAoBE,KAAKH,MAAMI,aAA/B,QACJ,4BAAI,mDAAyBD,KAAKH,MAAMK,UAApC,c,GAbXC,c,MCkBNC,MAVf,SAAmBP,GACf,OAEI,yBAAKC,UAAU,gBACX,yBAAKO,IAAKR,EAAMQ,IAAKP,UAAU,YAAYQ,IAAKT,EAAMS,IAAKC,QAAS,kBAAMV,EAAMW,cAAcX,EAAME,S,OC+EjGU,E,2MApFbC,MAAQ,CACNC,OACAV,aAAc,EACdC,UAAWS,EAAKC,OAChBC,eAAgB,I,EAmClBL,cAAgB,SAAAT,GAEde,QAAQC,IAAIhB,GACZ,EAAKiB,gBACD,EAAKN,MAAMG,eAAeI,SAASlB,GACrC,EAAKmB,WAEE,EAAKR,MAAMT,aAAe,EAAIU,EAAKC,OAC1C,EAAKO,WAIL,EAAKC,UAGP,EAAKV,MAAMG,eAAeQ,KAAKtB,I,0EA9C/Be,QAAQC,IAAI,c,sCAKZf,KAAKsB,UAAS,SAAUZ,EAAOb,GAC7B,MAAO,CACLI,aAAcD,KAAKU,MAAMT,aAAe,MAG5CD,KAAKsB,SAAS,CAAEpB,UAAWF,KAAKU,MAAMR,UAAY,M,gCAMlDqB,MAAM,0DACNvB,KAAKwB,c,iCAILD,MAAM,qEACNvB,KAAKwB,c,kCAILxB,KAAKsB,SAAS,CAAErB,aAAc,IAC9BD,KAAKsB,SAAS,CAAEpB,UAAWS,EAAKC,SAChCZ,KAAKsB,SAAS,CAAET,eAAgB,O,+BAqBxB,IAAD,OAGP,OAFAC,QAAQC,IAAIf,KAAKU,MAAMT,cACvBa,QAAQC,IAAIf,KAAKU,MAAMG,gBAErB,6BACE,kBAAC,EAAD,CACEZ,aAAcD,KAAKU,MAAMT,aACzBC,UAAWF,KAAKU,MAAMR,YAExB,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,OACZE,KAAKU,MAAMC,KAAKc,KAAI,SAAAC,GAAG,OACtB,kBAAC,EAAD,CACErB,IAAKqB,EAAIrB,IACTC,IAAKoB,EAAIpB,IACTqB,IAAKD,EAAI3B,GACTA,GAAI2B,EAAI3B,GACRS,cAAe,EAAKA,0B,GA5ElBL,aCIEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.587de086.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n\r\nclass Header extends Component {\r\n\r\n\r\n    render(props) {\r\n        //super(props);\r\n        //console.log(props);\r\n        return (\r\n            <div>\r\n                <nav>\r\n                    <div className=\"nav-wrapper left-align\">\r\n                        <span>Pet the dogs!</span>\r\n                        <ul id=\"nav-collapse-section\" className=\"right hide-on-med-and-down\">\r\n                            <li><span>Dogs petted: {this.props.currentScore} | </span></li>\r\n                            <li><span>Dogs left to pet: {this.props.leftToWin} </span></li>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React from \"react\"\r\n// import Dogs from \"../../Dogs.json\"\r\nimport \"./style.css\";\r\n\r\n\r\n// state = {\r\n//     Dogs,\r\n//     currentScore: 0,\r\n//     leftToWin: 9\r\n// };\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n\r\n        <div className=\"col s4 m4 l4\">\r\n            <img src={props.src} className=\"dog-image\" alt={props.alt} onClick={() => props.clickFunction(props.id)} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ImageCard;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport ImageCard from \"./components/ImageCard\";\n//import ImageSection from \"./components/ImageSection\";\nimport Dogs from \"./Dogs.json\";\n\n\nclass App extends Component {\n\n  state = {\n    Dogs,\n    currentScore: 0,\n    leftToWin: Dogs.length,\n    hasBeenClicked: []\n  };\n\n  scramble() {\n    console.log(\"scramble\");\n\n  };\n\n  increaseScore() {\n    this.setState(function (state, props) {\n      return {\n        currentScore: this.state.currentScore + 1\n      }\n    });\n    this.setState({ leftToWin: this.state.leftToWin - 1 });\n    //console.log(\"increased score to\" + this.state.currentScore);\n  };\n\n\n  gameWin() {\n    alert(\"Good job! You petted all the doggos. Now, do it again!\");\n    this.gameReset();\n  };\n\n  gameLose() {\n    alert(\"Awww, you petted the same dog twice. That's okay, just try again!\");\n    this.gameReset();\n  }\n\n  gameReset() {\n    this.setState({ currentScore: 0 });\n    this.setState({ leftToWin: Dogs.length });\n    this.setState({ hasBeenClicked: [] });\n  };\n\n  clickFunction = id => {\n    //console.log(this);\n    console.log(id);\n    this.increaseScore();\n    if (this.state.hasBeenClicked.includes(id)) {\n      this.gameLose();\n    }\n    else if (this.state.currentScore + 1 < Dogs.length) {\n      this.scramble();\n      //console.log(this.state.currentScore);\n    }\n    else {\n      this.gameWin();\n    };\n\n    this.state.hasBeenClicked.push(id);\n  };\n\n  render() {\n    console.log(this.state.currentScore);\n    console.log(this.state.hasBeenClicked);\n    return (\n      <div>\n        <Header\n          currentScore={this.state.currentScore}\n          leftToWin={this.state.leftToWin}\n        />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.Dogs.map(dog => (\n              <ImageCard\n                src={dog.src}\n                alt={dog.alt}\n                key={dog.id}\n                id={dog.id}\n                clickFunction={this.clickFunction}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}